// ‰øÆÊ≠£ÂêéÁöÑÊõ¥Êñ∞ËÑöÊú¨
import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { TicketingProgram } from "../target/types/ticketing_program";
import { PublicKey, Keypair } from "@solana/web3.js";
import * as fs from "fs";

async function main() {
  const connection = new anchor.web3.Connection(
    "https://api.devnet.solana.com",
    "confirmed"
  );
  
  const walletPath = process.env.HOME + "/.config/solana/id.json";
  const walletKeypair = Keypair.fromSecretKey(
    Buffer.from(JSON.parse(fs.readFileSync(walletPath, "utf-8")))
  );
  const wallet = new anchor.Wallet(walletKeypair);
  anchor.setProvider(new anchor.AnchorProvider(connection, wallet, {}));
  
  const program = anchor.workspace.TicketingProgram as Program<TicketingProgram>;
  
  const [platformConfig] = PublicKey.findProgramAddressSync(
    [Buffer.from("platform_config")],
    program.programId
  );
  
  // Ê≠£Á°ÆÁöÑÂπ≥Âè∞Èí±ÂåÖÂú∞ÂùÄÔºà‰∏çÊòØ token accountÔºâ
  const correctFeeReceiver = new PublicKey("F3muW7SHCjRWz9gPE639hkekbW2YxNUPA4r6mefZvzqx");
  
  console.log("=== ‰øÆÊ≠£ Platform Fee Receiver ===");
  console.log("ÂΩìÂâçÈí±ÂåÖ:", wallet.publicKey.toString());
  console.log("Âπ≥Âè∞ÈÖçÁΩÆPDA:", platformConfig.toString());
  console.log("Ê≠£Á°ÆÁöÑ Fee Receiver:", correctFeeReceiver.toString());
  console.log("");
  
  try {
    // Ëé∑ÂèñÂΩìÂâçÈÖçÁΩÆ
    console.log("üìã Ëé∑ÂèñÂΩìÂâçÂπ≥Âè∞ÈÖçÁΩÆ...");
    const currentConfig = await program.account.platformConfig.fetch(platformConfig);
    console.log("ÂΩìÂâç Fee Receiver:", currentConfig.feeReceiver.toString());
    console.log("ÂΩìÂâç Update Authority:", currentConfig.updateAuthority.toString());
    console.log("");
    
    // Ê£ÄÊü•ÊùÉÈôê
    if (currentConfig.updateAuthority.toString() !== wallet.publicKey.toString()) {
      console.error("‚ùå ÈîôËØØ: ÂΩìÂâçÈí±ÂåÖÊ≤°ÊúâÊõ¥Êñ∞ÊùÉÈôê");
      return;
    }
    
    console.log("‚è≥ ‰øÆÊ≠£ Fee Receiver...");
    
    // Êõ¥Êñ∞‰∏∫Ê≠£Á°ÆÁöÑÈí±ÂåÖÂú∞ÂùÄ
    const tx = await program.methods
      .updatePlatformConfig(
        correctFeeReceiver,              // Ê≠£Á°ÆÁöÑÈí±ÂåÖÂú∞ÂùÄ
        null,                            // new_fee_usdc (‰øùÊåÅ‰∏çÂèò)
        null,                            // new_backend_authority (‰øùÊåÅ‰∏çÂèò)
        null                             // new_event_admin (‰øùÊåÅ‰∏çÂèò)
      )
      .accountsPartial({
        authority: wallet.publicKey,
      })
      .rpc();
    
    console.log("‚úÖ Fee Receiver ‰øÆÊ≠£ÊàêÂäü!");
    console.log("‰∫§ÊòìÁ≠æÂêç:", tx);
    console.log("");
    
    // È™åËØÅÊõ¥Êñ∞
    const updatedConfig = await program.account.platformConfig.fetch(platformConfig);
    console.log("‰øÆÊ≠£ÂêéÁöÑÈÖçÁΩÆ:");
    console.log("  - Fee Receiver:", updatedConfig.feeReceiver.toString());
    console.log("  - Platform Fee:", updatedConfig.feeAmountUsdc.toNumber() / 1_000_000, "USDC");
    console.log("");
    
    console.log("üéâ Fee Receiver ‰øÆÊ≠£ÂÆåÊàê!");
    console.log("Áé∞Âú®Á®ãÂ∫è‰ºöÂü∫‰∫éÈí±ÂåÖÂú∞ÂùÄ F3muW7SHCjRWz9gPE639hkekbW2YxNUPA4r6mefZvzqx ËÆ°ÁÆó USDC ATA");
    
  } catch (error) {
    console.error("‚ùå ‰øÆÊ≠£Â§±Ë¥•:", error);
    throw error;
  }
}

main()
  .then(() => {
    console.log("‚úÖ ËÑöÊú¨ÊâßË°åÂÆåÊàê");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå ËÑöÊú¨ÊâßË°åÂ§±Ë¥•:", error);
    process.exit(1);
  });